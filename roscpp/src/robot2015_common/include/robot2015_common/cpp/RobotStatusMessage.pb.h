// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RobotStatusMessage.proto

#ifndef PROTOBUF_RobotStatusMessage_2eproto__INCLUDED
#define PROTOBUF_RobotStatusMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ControllerMessage.pb.h"
#include "pantiltMessage.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RobotStatusMessage_2eproto();
void protobuf_AssignDesc_RobotStatusMessage_2eproto();
void protobuf_ShutdownFile_RobotStatusMessage_2eproto();

class RobotStatusMessage;
class RobotStatusMessage_camera;
class RobotStatusMessage_infredcamera;

// ===================================================================

class RobotStatusMessage_camera : public ::google::protobuf::Message {
 public:
  RobotStatusMessage_camera();
  virtual ~RobotStatusMessage_camera();

  RobotStatusMessage_camera(const RobotStatusMessage_camera& from);

  inline RobotStatusMessage_camera& operator=(const RobotStatusMessage_camera& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotStatusMessage_camera& default_instance();

  void Swap(RobotStatusMessage_camera* other);

  // implements Message ----------------------------------------------

  RobotStatusMessage_camera* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RobotStatusMessage_camera& from);
  void MergeFrom(const RobotStatusMessage_camera& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 online = 1;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 1;
  inline ::google::protobuf::int32 online() const;
  inline void set_online(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RobotStatusMessage.camera)
 private:
  inline void set_has_online();
  inline void clear_has_online();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 online_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_RobotStatusMessage_2eproto();
  friend void protobuf_AssignDesc_RobotStatusMessage_2eproto();
  friend void protobuf_ShutdownFile_RobotStatusMessage_2eproto();

  void InitAsDefaultInstance();
  static RobotStatusMessage_camera* default_instance_;
};
// -------------------------------------------------------------------

class RobotStatusMessage_infredcamera : public ::google::protobuf::Message {
 public:
  RobotStatusMessage_infredcamera();
  virtual ~RobotStatusMessage_infredcamera();

  RobotStatusMessage_infredcamera(const RobotStatusMessage_infredcamera& from);

  inline RobotStatusMessage_infredcamera& operator=(const RobotStatusMessage_infredcamera& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotStatusMessage_infredcamera& default_instance();

  void Swap(RobotStatusMessage_infredcamera* other);

  // implements Message ----------------------------------------------

  RobotStatusMessage_infredcamera* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RobotStatusMessage_infredcamera& from);
  void MergeFrom(const RobotStatusMessage_infredcamera& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 online = 1;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 1;
  inline ::google::protobuf::int32 online() const;
  inline void set_online(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RobotStatusMessage.infredcamera)
 private:
  inline void set_has_online();
  inline void clear_has_online();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 online_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_RobotStatusMessage_2eproto();
  friend void protobuf_AssignDesc_RobotStatusMessage_2eproto();
  friend void protobuf_ShutdownFile_RobotStatusMessage_2eproto();

  void InitAsDefaultInstance();
  static RobotStatusMessage_infredcamera* default_instance_;
};
// -------------------------------------------------------------------

class RobotStatusMessage : public ::google::protobuf::Message {
 public:
  RobotStatusMessage();
  virtual ~RobotStatusMessage();

  RobotStatusMessage(const RobotStatusMessage& from);

  inline RobotStatusMessage& operator=(const RobotStatusMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotStatusMessage& default_instance();

  void Swap(RobotStatusMessage* other);

  // implements Message ----------------------------------------------

  RobotStatusMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RobotStatusMessage& from);
  void MergeFrom(const RobotStatusMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RobotStatusMessage_camera camera;
  typedef RobotStatusMessage_infredcamera infredcamera;

  // accessors -------------------------------------------------------

  // optional int32 Stat = 1;
  inline bool has_stat() const;
  inline void clear_stat();
  static const int kStatFieldNumber = 1;
  inline ::google::protobuf::int32 stat() const;
  inline void set_stat(::google::protobuf::int32 value);

  // optional .ControllerMessage Controller = 2;
  inline bool has_controller() const;
  inline void clear_controller();
  static const int kControllerFieldNumber = 2;
  inline const ::ControllerMessage& controller() const;
  inline ::ControllerMessage* mutable_controller();
  inline ::ControllerMessage* release_controller();
  inline void set_allocated_controller(::ControllerMessage* controller);

  // optional .RobotStatusMessage.camera cameramsg = 3;
  inline bool has_cameramsg() const;
  inline void clear_cameramsg();
  static const int kCameramsgFieldNumber = 3;
  inline const ::RobotStatusMessage_camera& cameramsg() const;
  inline ::RobotStatusMessage_camera* mutable_cameramsg();
  inline ::RobotStatusMessage_camera* release_cameramsg();
  inline void set_allocated_cameramsg(::RobotStatusMessage_camera* cameramsg);

  // optional .RobotStatusMessage.infredcamera infredcameramsg = 4;
  inline bool has_infredcameramsg() const;
  inline void clear_infredcameramsg();
  static const int kInfredcameramsgFieldNumber = 4;
  inline const ::RobotStatusMessage_infredcamera& infredcameramsg() const;
  inline ::RobotStatusMessage_infredcamera* mutable_infredcameramsg();
  inline ::RobotStatusMessage_infredcamera* release_infredcameramsg();
  inline void set_allocated_infredcameramsg(::RobotStatusMessage_infredcamera* infredcameramsg);

  // optional .pantiltMessage pantlitmsg = 5;
  inline bool has_pantlitmsg() const;
  inline void clear_pantlitmsg();
  static const int kPantlitmsgFieldNumber = 5;
  inline const ::pantiltMessage& pantlitmsg() const;
  inline ::pantiltMessage* mutable_pantlitmsg();
  inline ::pantiltMessage* release_pantlitmsg();
  inline void set_allocated_pantlitmsg(::pantiltMessage* pantlitmsg);

  // @@protoc_insertion_point(class_scope:RobotStatusMessage)
 private:
  inline void set_has_stat();
  inline void clear_has_stat();
  inline void set_has_controller();
  inline void clear_has_controller();
  inline void set_has_cameramsg();
  inline void clear_has_cameramsg();
  inline void set_has_infredcameramsg();
  inline void clear_has_infredcameramsg();
  inline void set_has_pantlitmsg();
  inline void clear_has_pantlitmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ControllerMessage* controller_;
  ::RobotStatusMessage_camera* cameramsg_;
  ::RobotStatusMessage_infredcamera* infredcameramsg_;
  ::pantiltMessage* pantlitmsg_;
  ::google::protobuf::int32 stat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_RobotStatusMessage_2eproto();
  friend void protobuf_AssignDesc_RobotStatusMessage_2eproto();
  friend void protobuf_ShutdownFile_RobotStatusMessage_2eproto();

  void InitAsDefaultInstance();
  static RobotStatusMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// RobotStatusMessage_camera

// optional int32 online = 1;
inline bool RobotStatusMessage_camera::has_online() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotStatusMessage_camera::set_has_online() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotStatusMessage_camera::clear_has_online() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotStatusMessage_camera::clear_online() {
  online_ = 0;
  clear_has_online();
}
inline ::google::protobuf::int32 RobotStatusMessage_camera::online() const {
  return online_;
}
inline void RobotStatusMessage_camera::set_online(::google::protobuf::int32 value) {
  set_has_online();
  online_ = value;
}

// -------------------------------------------------------------------

// RobotStatusMessage_infredcamera

// optional int32 online = 1;
inline bool RobotStatusMessage_infredcamera::has_online() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotStatusMessage_infredcamera::set_has_online() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotStatusMessage_infredcamera::clear_has_online() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotStatusMessage_infredcamera::clear_online() {
  online_ = 0;
  clear_has_online();
}
inline ::google::protobuf::int32 RobotStatusMessage_infredcamera::online() const {
  return online_;
}
inline void RobotStatusMessage_infredcamera::set_online(::google::protobuf::int32 value) {
  set_has_online();
  online_ = value;
}

// -------------------------------------------------------------------

// RobotStatusMessage

// optional int32 Stat = 1;
inline bool RobotStatusMessage::has_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotStatusMessage::set_has_stat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotStatusMessage::clear_has_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotStatusMessage::clear_stat() {
  stat_ = 0;
  clear_has_stat();
}
inline ::google::protobuf::int32 RobotStatusMessage::stat() const {
  return stat_;
}
inline void RobotStatusMessage::set_stat(::google::protobuf::int32 value) {
  set_has_stat();
  stat_ = value;
}

// optional .ControllerMessage Controller = 2;
inline bool RobotStatusMessage::has_controller() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobotStatusMessage::set_has_controller() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobotStatusMessage::clear_has_controller() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RobotStatusMessage::clear_controller() {
  if (controller_ != NULL) controller_->::ControllerMessage::Clear();
  clear_has_controller();
}
inline const ::ControllerMessage& RobotStatusMessage::controller() const {
  return controller_ != NULL ? *controller_ : *default_instance_->controller_;
}
inline ::ControllerMessage* RobotStatusMessage::mutable_controller() {
  set_has_controller();
  if (controller_ == NULL) controller_ = new ::ControllerMessage;
  return controller_;
}
inline ::ControllerMessage* RobotStatusMessage::release_controller() {
  clear_has_controller();
  ::ControllerMessage* temp = controller_;
  controller_ = NULL;
  return temp;
}
inline void RobotStatusMessage::set_allocated_controller(::ControllerMessage* controller) {
  delete controller_;
  controller_ = controller;
  if (controller) {
    set_has_controller();
  } else {
    clear_has_controller();
  }
}

// optional .RobotStatusMessage.camera cameramsg = 3;
inline bool RobotStatusMessage::has_cameramsg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RobotStatusMessage::set_has_cameramsg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RobotStatusMessage::clear_has_cameramsg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RobotStatusMessage::clear_cameramsg() {
  if (cameramsg_ != NULL) cameramsg_->::RobotStatusMessage_camera::Clear();
  clear_has_cameramsg();
}
inline const ::RobotStatusMessage_camera& RobotStatusMessage::cameramsg() const {
  return cameramsg_ != NULL ? *cameramsg_ : *default_instance_->cameramsg_;
}
inline ::RobotStatusMessage_camera* RobotStatusMessage::mutable_cameramsg() {
  set_has_cameramsg();
  if (cameramsg_ == NULL) cameramsg_ = new ::RobotStatusMessage_camera;
  return cameramsg_;
}
inline ::RobotStatusMessage_camera* RobotStatusMessage::release_cameramsg() {
  clear_has_cameramsg();
  ::RobotStatusMessage_camera* temp = cameramsg_;
  cameramsg_ = NULL;
  return temp;
}
inline void RobotStatusMessage::set_allocated_cameramsg(::RobotStatusMessage_camera* cameramsg) {
  delete cameramsg_;
  cameramsg_ = cameramsg;
  if (cameramsg) {
    set_has_cameramsg();
  } else {
    clear_has_cameramsg();
  }
}

// optional .RobotStatusMessage.infredcamera infredcameramsg = 4;
inline bool RobotStatusMessage::has_infredcameramsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RobotStatusMessage::set_has_infredcameramsg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RobotStatusMessage::clear_has_infredcameramsg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RobotStatusMessage::clear_infredcameramsg() {
  if (infredcameramsg_ != NULL) infredcameramsg_->::RobotStatusMessage_infredcamera::Clear();
  clear_has_infredcameramsg();
}
inline const ::RobotStatusMessage_infredcamera& RobotStatusMessage::infredcameramsg() const {
  return infredcameramsg_ != NULL ? *infredcameramsg_ : *default_instance_->infredcameramsg_;
}
inline ::RobotStatusMessage_infredcamera* RobotStatusMessage::mutable_infredcameramsg() {
  set_has_infredcameramsg();
  if (infredcameramsg_ == NULL) infredcameramsg_ = new ::RobotStatusMessage_infredcamera;
  return infredcameramsg_;
}
inline ::RobotStatusMessage_infredcamera* RobotStatusMessage::release_infredcameramsg() {
  clear_has_infredcameramsg();
  ::RobotStatusMessage_infredcamera* temp = infredcameramsg_;
  infredcameramsg_ = NULL;
  return temp;
}
inline void RobotStatusMessage::set_allocated_infredcameramsg(::RobotStatusMessage_infredcamera* infredcameramsg) {
  delete infredcameramsg_;
  infredcameramsg_ = infredcameramsg;
  if (infredcameramsg) {
    set_has_infredcameramsg();
  } else {
    clear_has_infredcameramsg();
  }
}

// optional .pantiltMessage pantlitmsg = 5;
inline bool RobotStatusMessage::has_pantlitmsg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RobotStatusMessage::set_has_pantlitmsg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RobotStatusMessage::clear_has_pantlitmsg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RobotStatusMessage::clear_pantlitmsg() {
  if (pantlitmsg_ != NULL) pantlitmsg_->::pantiltMessage::Clear();
  clear_has_pantlitmsg();
}
inline const ::pantiltMessage& RobotStatusMessage::pantlitmsg() const {
  return pantlitmsg_ != NULL ? *pantlitmsg_ : *default_instance_->pantlitmsg_;
}
inline ::pantiltMessage* RobotStatusMessage::mutable_pantlitmsg() {
  set_has_pantlitmsg();
  if (pantlitmsg_ == NULL) pantlitmsg_ = new ::pantiltMessage;
  return pantlitmsg_;
}
inline ::pantiltMessage* RobotStatusMessage::release_pantlitmsg() {
  clear_has_pantlitmsg();
  ::pantiltMessage* temp = pantlitmsg_;
  pantlitmsg_ = NULL;
  return temp;
}
inline void RobotStatusMessage::set_allocated_pantlitmsg(::pantiltMessage* pantlitmsg) {
  delete pantlitmsg_;
  pantlitmsg_ = pantlitmsg;
  if (pantlitmsg) {
    set_has_pantlitmsg();
  } else {
    clear_has_pantlitmsg();
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RobotStatusMessage_2eproto__INCLUDED
