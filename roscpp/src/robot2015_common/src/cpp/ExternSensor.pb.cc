// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExternSensor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ExternSensor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ExternSensor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExternSensor_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExternSensor_Mode_Temp_humi_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExternSensor_Mode_Temp_humi_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ExternSensor_2eproto() {
  protobuf_AddDesc_ExternSensor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ExternSensor.proto");
  GOOGLE_CHECK(file != NULL);
  ExternSensor_descriptor_ = file->message_type(0);
  static const int ExternSensor_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternSensor, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternSensor, temp_pt100_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternSensor, temp_humi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternSensor, io_infrared_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternSensor, io_collision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternSensor, led_status_),
  };
  ExternSensor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExternSensor_descriptor_,
      ExternSensor::default_instance_,
      ExternSensor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternSensor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternSensor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExternSensor));
  ExternSensor_Mode_Temp_humi_descriptor_ = ExternSensor_descriptor_->nested_type(0);
  static const int ExternSensor_Mode_Temp_humi_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternSensor_Mode_Temp_humi, interior_temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternSensor_Mode_Temp_humi, interior_humi_),
  };
  ExternSensor_Mode_Temp_humi_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExternSensor_Mode_Temp_humi_descriptor_,
      ExternSensor_Mode_Temp_humi::default_instance_,
      ExternSensor_Mode_Temp_humi_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternSensor_Mode_Temp_humi, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternSensor_Mode_Temp_humi, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExternSensor_Mode_Temp_humi));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ExternSensor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExternSensor_descriptor_, &ExternSensor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExternSensor_Mode_Temp_humi_descriptor_, &ExternSensor_Mode_Temp_humi::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ExternSensor_2eproto() {
  delete ExternSensor::default_instance_;
  delete ExternSensor_reflection_;
  delete ExternSensor_Mode_Temp_humi::default_instance_;
  delete ExternSensor_Mode_Temp_humi_reflection_;
}

void protobuf_AddDesc_ExternSensor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ExternSensor.proto\"\342\001\n\014ExternSensor\022\016\n"
    "\006online\030\010 \001(\005\022\022\n\nTemp_Pt100\030\001 \003(\005\022/\n\tTem"
    "p_humi\030\002 \003(\0132\034.ExternSensor.Mode_Temp_hu"
    "mi\022\023\n\013IO_Infrared\030\004 \003(\005\022\024\n\014IO_collision\030"
    "\005 \003(\005\022\022\n\nLED_status\030\006 \001(\t\032>\n\016Mode_Temp_h"
    "umi\022\025\n\rinterior_temp\030\001 \001(\005\022\025\n\rinterior_h"
    "umi\030\002 \001(\005", 249);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ExternSensor.proto", &protobuf_RegisterTypes);
  ExternSensor::default_instance_ = new ExternSensor();
  ExternSensor_Mode_Temp_humi::default_instance_ = new ExternSensor_Mode_Temp_humi();
  ExternSensor::default_instance_->InitAsDefaultInstance();
  ExternSensor_Mode_Temp_humi::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ExternSensor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ExternSensor_2eproto {
  StaticDescriptorInitializer_ExternSensor_2eproto() {
    protobuf_AddDesc_ExternSensor_2eproto();
  }
} static_descriptor_initializer_ExternSensor_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ExternSensor_Mode_Temp_humi::kInteriorTempFieldNumber;
const int ExternSensor_Mode_Temp_humi::kInteriorHumiFieldNumber;
#endif  // !_MSC_VER

ExternSensor_Mode_Temp_humi::ExternSensor_Mode_Temp_humi()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExternSensor_Mode_Temp_humi::InitAsDefaultInstance() {
}

ExternSensor_Mode_Temp_humi::ExternSensor_Mode_Temp_humi(const ExternSensor_Mode_Temp_humi& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExternSensor_Mode_Temp_humi::SharedCtor() {
  _cached_size_ = 0;
  interior_temp_ = 0;
  interior_humi_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExternSensor_Mode_Temp_humi::~ExternSensor_Mode_Temp_humi() {
  SharedDtor();
}

void ExternSensor_Mode_Temp_humi::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExternSensor_Mode_Temp_humi::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExternSensor_Mode_Temp_humi::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternSensor_Mode_Temp_humi_descriptor_;
}

const ExternSensor_Mode_Temp_humi& ExternSensor_Mode_Temp_humi::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExternSensor_2eproto();
  return *default_instance_;
}

ExternSensor_Mode_Temp_humi* ExternSensor_Mode_Temp_humi::default_instance_ = NULL;

ExternSensor_Mode_Temp_humi* ExternSensor_Mode_Temp_humi::New() const {
  return new ExternSensor_Mode_Temp_humi;
}

void ExternSensor_Mode_Temp_humi::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    interior_temp_ = 0;
    interior_humi_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExternSensor_Mode_Temp_humi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 interior_temp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interior_temp_)));
          set_has_interior_temp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_interior_humi;
        break;
      }

      // optional int32 interior_humi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interior_humi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interior_humi_)));
          set_has_interior_humi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExternSensor_Mode_Temp_humi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 interior_temp = 1;
  if (has_interior_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->interior_temp(), output);
  }

  // optional int32 interior_humi = 2;
  if (has_interior_humi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->interior_humi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExternSensor_Mode_Temp_humi::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 interior_temp = 1;
  if (has_interior_temp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->interior_temp(), target);
  }

  // optional int32 interior_humi = 2;
  if (has_interior_humi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->interior_humi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExternSensor_Mode_Temp_humi::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 interior_temp = 1;
    if (has_interior_temp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interior_temp());
    }

    // optional int32 interior_humi = 2;
    if (has_interior_humi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interior_humi());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExternSensor_Mode_Temp_humi::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExternSensor_Mode_Temp_humi* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExternSensor_Mode_Temp_humi*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExternSensor_Mode_Temp_humi::MergeFrom(const ExternSensor_Mode_Temp_humi& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_interior_temp()) {
      set_interior_temp(from.interior_temp());
    }
    if (from.has_interior_humi()) {
      set_interior_humi(from.interior_humi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExternSensor_Mode_Temp_humi::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternSensor_Mode_Temp_humi::CopyFrom(const ExternSensor_Mode_Temp_humi& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternSensor_Mode_Temp_humi::IsInitialized() const {

  return true;
}

void ExternSensor_Mode_Temp_humi::Swap(ExternSensor_Mode_Temp_humi* other) {
  if (other != this) {
    std::swap(interior_temp_, other->interior_temp_);
    std::swap(interior_humi_, other->interior_humi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExternSensor_Mode_Temp_humi::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExternSensor_Mode_Temp_humi_descriptor_;
  metadata.reflection = ExternSensor_Mode_Temp_humi_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ExternSensor::kOnlineFieldNumber;
const int ExternSensor::kTempPt100FieldNumber;
const int ExternSensor::kTempHumiFieldNumber;
const int ExternSensor::kIOInfraredFieldNumber;
const int ExternSensor::kIOCollisionFieldNumber;
const int ExternSensor::kLEDStatusFieldNumber;
#endif  // !_MSC_VER

ExternSensor::ExternSensor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExternSensor::InitAsDefaultInstance() {
}

ExternSensor::ExternSensor(const ExternSensor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExternSensor::SharedCtor() {
  _cached_size_ = 0;
  online_ = 0;
  led_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExternSensor::~ExternSensor() {
  SharedDtor();
}

void ExternSensor::SharedDtor() {
  if (led_status_ != &::google::protobuf::internal::kEmptyString) {
    delete led_status_;
  }
  if (this != default_instance_) {
  }
}

void ExternSensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExternSensor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternSensor_descriptor_;
}

const ExternSensor& ExternSensor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExternSensor_2eproto();
  return *default_instance_;
}

ExternSensor* ExternSensor::default_instance_ = NULL;

ExternSensor* ExternSensor::New() const {
  return new ExternSensor;
}

void ExternSensor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    online_ = 0;
    if (has_led_status()) {
      if (led_status_ != &::google::protobuf::internal::kEmptyString) {
        led_status_->clear();
      }
    }
  }
  temp_pt100_.Clear();
  temp_humi_.Clear();
  io_infrared_.Clear();
  io_collision_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExternSensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 Temp_Pt100 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Temp_Pt100:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_temp_pt100())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_temp_pt100())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_Temp_Pt100;
        if (input->ExpectTag(18)) goto parse_Temp_humi;
        break;
      }

      // repeated .ExternSensor.Mode_Temp_humi Temp_humi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Temp_humi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_temp_humi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Temp_humi;
        if (input->ExpectTag(32)) goto parse_IO_Infrared;
        break;
      }

      // repeated int32 IO_Infrared = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IO_Infrared:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_io_infrared())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_io_infrared())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IO_Infrared;
        if (input->ExpectTag(40)) goto parse_IO_collision;
        break;
      }

      // repeated int32 IO_collision = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IO_collision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_io_collision())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_io_collision())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_IO_collision;
        if (input->ExpectTag(50)) goto parse_LED_status;
        break;
      }

      // optional string LED_status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LED_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_led_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->led_status().data(), this->led_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_online;
        break;
      }

      // optional int32 online = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExternSensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 Temp_Pt100 = 1;
  for (int i = 0; i < this->temp_pt100_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->temp_pt100(i), output);
  }

  // repeated .ExternSensor.Mode_Temp_humi Temp_humi = 2;
  for (int i = 0; i < this->temp_humi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->temp_humi(i), output);
  }

  // repeated int32 IO_Infrared = 4;
  for (int i = 0; i < this->io_infrared_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->io_infrared(i), output);
  }

  // repeated int32 IO_collision = 5;
  for (int i = 0; i < this->io_collision_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->io_collision(i), output);
  }

  // optional string LED_status = 6;
  if (has_led_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->led_status().data(), this->led_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->led_status(), output);
  }

  // optional int32 online = 8;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->online(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExternSensor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 Temp_Pt100 = 1;
  for (int i = 0; i < this->temp_pt100_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->temp_pt100(i), target);
  }

  // repeated .ExternSensor.Mode_Temp_humi Temp_humi = 2;
  for (int i = 0; i < this->temp_humi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->temp_humi(i), target);
  }

  // repeated int32 IO_Infrared = 4;
  for (int i = 0; i < this->io_infrared_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->io_infrared(i), target);
  }

  // repeated int32 IO_collision = 5;
  for (int i = 0; i < this->io_collision_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->io_collision(i), target);
  }

  // optional string LED_status = 6;
  if (has_led_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->led_status().data(), this->led_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->led_status(), target);
  }

  // optional int32 online = 8;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->online(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExternSensor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 online = 8;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online());
    }

    // optional string LED_status = 6;
    if (has_led_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->led_status());
    }

  }
  // repeated int32 Temp_Pt100 = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->temp_pt100_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->temp_pt100(i));
    }
    total_size += 1 * this->temp_pt100_size() + data_size;
  }

  // repeated .ExternSensor.Mode_Temp_humi Temp_humi = 2;
  total_size += 1 * this->temp_humi_size();
  for (int i = 0; i < this->temp_humi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->temp_humi(i));
  }

  // repeated int32 IO_Infrared = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->io_infrared_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->io_infrared(i));
    }
    total_size += 1 * this->io_infrared_size() + data_size;
  }

  // repeated int32 IO_collision = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->io_collision_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->io_collision(i));
    }
    total_size += 1 * this->io_collision_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExternSensor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExternSensor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExternSensor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExternSensor::MergeFrom(const ExternSensor& from) {
  GOOGLE_CHECK_NE(&from, this);
  temp_pt100_.MergeFrom(from.temp_pt100_);
  temp_humi_.MergeFrom(from.temp_humi_);
  io_infrared_.MergeFrom(from.io_infrared_);
  io_collision_.MergeFrom(from.io_collision_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_led_status()) {
      set_led_status(from.led_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExternSensor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternSensor::CopyFrom(const ExternSensor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternSensor::IsInitialized() const {

  return true;
}

void ExternSensor::Swap(ExternSensor* other) {
  if (other != this) {
    std::swap(online_, other->online_);
    temp_pt100_.Swap(&other->temp_pt100_);
    temp_humi_.Swap(&other->temp_humi_);
    io_infrared_.Swap(&other->io_infrared_);
    io_collision_.Swap(&other->io_collision_);
    std::swap(led_status_, other->led_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExternSensor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExternSensor_descriptor_;
  metadata.reflection = ExternSensor_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
