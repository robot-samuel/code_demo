// Generated by gencpp from file dgvmsg/DriverStatues.msg
// DO NOT EDIT!


#ifndef DGVMSG_MESSAGE_DRIVERSTATUES_H
#define DGVMSG_MESSAGE_DRIVERSTATUES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dgvmsg
{
template <class ContainerAllocator>
struct DriverStatues_
{
  typedef DriverStatues_<ContainerAllocator> Type;

  DriverStatues_()
    : device_status(0)
    , device_add(0)
    , actvelocityRPM(0)
    , setvelocityRPM(0)
    , dc_voltage(0)
    , ipm_temperature(0)
    , actcurrent(0.0)
    , actualpos(0)
    , emergencyinputvalue(0)
    , errorcode()  {
    }
  DriverStatues_(const ContainerAllocator& _alloc)
    : device_status(0)
    , device_add(0)
    , actvelocityRPM(0)
    , setvelocityRPM(0)
    , dc_voltage(0)
    , ipm_temperature(0)
    , actcurrent(0.0)
    , actualpos(0)
    , emergencyinputvalue(0)
    , errorcode(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _device_status_type;
  _device_status_type device_status;

   typedef int32_t _device_add_type;
  _device_add_type device_add;

   typedef int32_t _actvelocityRPM_type;
  _actvelocityRPM_type actvelocityRPM;

   typedef int32_t _setvelocityRPM_type;
  _setvelocityRPM_type setvelocityRPM;

   typedef uint16_t _dc_voltage_type;
  _dc_voltage_type dc_voltage;

   typedef uint16_t _ipm_temperature_type;
  _ipm_temperature_type ipm_temperature;

   typedef float _actcurrent_type;
  _actcurrent_type actcurrent;

   typedef int32_t _actualpos_type;
  _actualpos_type actualpos;

   typedef int32_t _emergencyinputvalue_type;
  _emergencyinputvalue_type emergencyinputvalue;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _errorcode_type;
  _errorcode_type errorcode;




  typedef boost::shared_ptr< ::dgvmsg::DriverStatues_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dgvmsg::DriverStatues_<ContainerAllocator> const> ConstPtr;

}; // struct DriverStatues_

typedef ::dgvmsg::DriverStatues_<std::allocator<void> > DriverStatues;

typedef boost::shared_ptr< ::dgvmsg::DriverStatues > DriverStatuesPtr;
typedef boost::shared_ptr< ::dgvmsg::DriverStatues const> DriverStatuesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dgvmsg::DriverStatues_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dgvmsg::DriverStatues_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dgvmsg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'dgvmsg': ['/home/pc-robot/Workspace/demo/roscpp/src/dgvmsg/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dgvmsg::DriverStatues_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dgvmsg::DriverStatues_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dgvmsg::DriverStatues_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dgvmsg::DriverStatues_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dgvmsg::DriverStatues_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dgvmsg::DriverStatues_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dgvmsg::DriverStatues_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c62c2a7291954cadc3c1037b1a2821b0";
  }

  static const char* value(const ::dgvmsg::DriverStatues_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc62c2a7291954cadULL;
  static const uint64_t static_value2 = 0xc3c1037b1a2821b0ULL;
};

template<class ContainerAllocator>
struct DataType< ::dgvmsg::DriverStatues_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dgvmsg/DriverStatues";
  }

  static const char* value(const ::dgvmsg::DriverStatues_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dgvmsg::DriverStatues_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
\n\
int32 device_status\n\
int32 device_add\n\
int32 actvelocityRPM\n\
int32 setvelocityRPM\n\
uint16 dc_voltage\n\
uint16 ipm_temperature\n\
float32 actcurrent\n\
int32 actualpos\n\
int32 emergencyinputvalue\n\
string errorcode\n\
\n\
";
  }

  static const char* value(const ::dgvmsg::DriverStatues_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dgvmsg::DriverStatues_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.device_status);
      stream.next(m.device_add);
      stream.next(m.actvelocityRPM);
      stream.next(m.setvelocityRPM);
      stream.next(m.dc_voltage);
      stream.next(m.ipm_temperature);
      stream.next(m.actcurrent);
      stream.next(m.actualpos);
      stream.next(m.emergencyinputvalue);
      stream.next(m.errorcode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DriverStatues_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dgvmsg::DriverStatues_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dgvmsg::DriverStatues_<ContainerAllocator>& v)
  {
    s << indent << "device_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.device_status);
    s << indent << "device_add: ";
    Printer<int32_t>::stream(s, indent + "  ", v.device_add);
    s << indent << "actvelocityRPM: ";
    Printer<int32_t>::stream(s, indent + "  ", v.actvelocityRPM);
    s << indent << "setvelocityRPM: ";
    Printer<int32_t>::stream(s, indent + "  ", v.setvelocityRPM);
    s << indent << "dc_voltage: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.dc_voltage);
    s << indent << "ipm_temperature: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ipm_temperature);
    s << indent << "actcurrent: ";
    Printer<float>::stream(s, indent + "  ", v.actcurrent);
    s << indent << "actualpos: ";
    Printer<int32_t>::stream(s, indent + "  ", v.actualpos);
    s << indent << "emergencyinputvalue: ";
    Printer<int32_t>::stream(s, indent + "  ", v.emergencyinputvalue);
    s << indent << "errorcode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.errorcode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DGVMSG_MESSAGE_DRIVERSTATUES_H
