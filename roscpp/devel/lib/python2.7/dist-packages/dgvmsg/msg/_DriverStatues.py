# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dgvmsg/DriverStatues.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DriverStatues(genpy.Message):
  _md5sum = "c62c2a7291954cadc3c1037b1a2821b0"
  _type = "dgvmsg/DriverStatues"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the

int32 device_status
int32 device_add
int32 actvelocityRPM
int32 setvelocityRPM
uint16 dc_voltage
uint16 ipm_temperature
float32 actcurrent
int32 actualpos
int32 emergencyinputvalue
string errorcode

"""
  __slots__ = ['device_status','device_add','actvelocityRPM','setvelocityRPM','dc_voltage','ipm_temperature','actcurrent','actualpos','emergencyinputvalue','errorcode']
  _slot_types = ['int32','int32','int32','int32','uint16','uint16','float32','int32','int32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       device_status,device_add,actvelocityRPM,setvelocityRPM,dc_voltage,ipm_temperature,actcurrent,actualpos,emergencyinputvalue,errorcode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DriverStatues, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.device_status is None:
        self.device_status = 0
      if self.device_add is None:
        self.device_add = 0
      if self.actvelocityRPM is None:
        self.actvelocityRPM = 0
      if self.setvelocityRPM is None:
        self.setvelocityRPM = 0
      if self.dc_voltage is None:
        self.dc_voltage = 0
      if self.ipm_temperature is None:
        self.ipm_temperature = 0
      if self.actcurrent is None:
        self.actcurrent = 0.
      if self.actualpos is None:
        self.actualpos = 0
      if self.emergencyinputvalue is None:
        self.emergencyinputvalue = 0
      if self.errorcode is None:
        self.errorcode = ''
    else:
      self.device_status = 0
      self.device_add = 0
      self.actvelocityRPM = 0
      self.setvelocityRPM = 0
      self.dc_voltage = 0
      self.ipm_temperature = 0
      self.actcurrent = 0.
      self.actualpos = 0
      self.emergencyinputvalue = 0
      self.errorcode = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4i2Hf2i.pack(_x.device_status, _x.device_add, _x.actvelocityRPM, _x.setvelocityRPM, _x.dc_voltage, _x.ipm_temperature, _x.actcurrent, _x.actualpos, _x.emergencyinputvalue))
      _x = self.errorcode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.device_status, _x.device_add, _x.actvelocityRPM, _x.setvelocityRPM, _x.dc_voltage, _x.ipm_temperature, _x.actcurrent, _x.actualpos, _x.emergencyinputvalue,) = _struct_4i2Hf2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.errorcode = str[start:end].decode('utf-8')
      else:
        self.errorcode = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4i2Hf2i.pack(_x.device_status, _x.device_add, _x.actvelocityRPM, _x.setvelocityRPM, _x.dc_voltage, _x.ipm_temperature, _x.actcurrent, _x.actualpos, _x.emergencyinputvalue))
      _x = self.errorcode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.device_status, _x.device_add, _x.actvelocityRPM, _x.setvelocityRPM, _x.dc_voltage, _x.ipm_temperature, _x.actcurrent, _x.actualpos, _x.emergencyinputvalue,) = _struct_4i2Hf2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.errorcode = str[start:end].decode('utf-8')
      else:
        self.errorcode = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4i2Hf2i = struct.Struct("<4i2Hf2i")
